plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3' apply false
    id 'io.spring.dependency-management' version '1.1.6' apply false
}

// 루트 프로젝트에는 Spring Boot 비적용
configurations.all {
    exclude group: 'org.springframework.boot'
}

allprojects {
    group = 'farm2pot'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
        maven {url 'https://repo.spring.io/milestone'}
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
}

ext {
    redisOmVersion = '0.9.10'
    querydslVersion = '5.1.0'
    jwtVersion = '0.12.6'
    mapstructVersion = '1.6.3'
    jacksonVersion = '2.19.1'
    caffeineVersion = '3.2.1'
    p6spyVersion = '1.11.0'
    springdocVersion = '2.8.9'
    ulidVersion = '5.2.3'

    annotationVersion = '3.0.0'
    persistenceVersion = '3.2.0'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    group = rootProject.group
    version = rootProject.version

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:3.3.3"
        }
    }

    ext {
        isMacOs = System.getProperty('os.name').toLowerCase().contains('mac')
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'

        compileOnly 'org.projectlombok:lombok'
        runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.5.3'
        runtimeOnly 'mysql:mysql-connector-java:8.0.33'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'

        /** Spring-Doc **/
        // implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: "$springdocVersion"

        /** AOP **/
        implementation 'org.springframework.boot:spring-boot-starter-aop'

        /** JWT **/
        implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: "$jwtVersion"
        runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: "$jwtVersion"
        runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: "$jwtVersion"

        /** Spring-Security-Crypto **/
        implementation 'org.springframework.security:spring-security-crypto'

        /** Apache HttpClient for RestTemplate connection pooling **/
        implementation 'org.apache.httpcomponents.client5:httpclient5'

        /** REDIS **/
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'redis.clients:jedis:5.1.0'

        /** Reflections **/
        implementation 'org.reflections:reflections:0.10.2'

        /** Map Struct **/
        implementation "org.mapstruct:mapstruct:$mapstructVersion"
        annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
        annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

        /** Jackson **/
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jacksonVersion"
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "$jacksonVersion"

        /** Caffeine Cache **/
        implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: "$caffeineVersion"

        /** JPA **/
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        /** P6Spy **/
        implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:$p6spyVersion"

        // ULID
        implementation group: 'com.github.f4b6a3', name: 'ulid-creator', version: "$ulidVersion"

        // UUID
        implementation "com.fasterxml.uuid:java-uuid-generator:5.1.0"

        /** QueryDSL Implementation **/
        implementation "com.querydsl:querydsl-jpa:$querydslVersion:jakarta"
        implementation "com.querydsl:querydsl-core:$querydslVersion"
        annotationProcessor "com.querydsl:querydsl-apt:$querydslVersion:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api:$annotationVersion"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api:$persistenceVersion"

        // 공통관련 테스트 의존성
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'
        testImplementation 'org.springframework.security:spring-security-test'

        // JUnit Jupiter API와 Engine을 테스트 의존성으로 추가
        testImplementation 'org.junit.jupiter:junit-jupiter-api:6.0.0-M1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:6.0.0-M1'

        // Jsoup(for Html cleaner)
        implementation group: 'org.jsoup', name: 'jsoup', version: '1.21.1'

        implementation 'org.springframework.boot:spring-boot-devtools'
        implementation 'org.apache.commons:commons-text:1.13.1'

        if (project.ext.isMacOs) {
            runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.2.2.Final:osx-aarch_64' // MacOS Silicon 라이브러리 누락 문제
        }
    }

    // 공통 컴파일 설정
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.release.set(21)
    }
}


// core 모듈
project(":apps:core") {
    apply plugin: 'org.springframework.boot'
    bootJar {
        archiveBaseName.set('core')
        archiveVersion.set(version as String)
        archiveClassifier.set('')
    }
    springBoot {
        mainClass = 'com.farm2pot.Main'
    }
}

// user 모듈
project(":apps:user") {
    apply plugin: 'org.springframework.boot'
    bootJar {
        archiveBaseName.set('user')
        archiveVersion.set(version as String)
        archiveClassifier.set('')
    }
    dependencies {
        implementation project(':apps:core')
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
    }
    springBoot {
        mainClass = 'com.farm2pot.UserApplication'
    }
}

// admin 모듈
project(":apps:admin") {
    apply plugin: 'org.springframework.boot'
    bootJar {
        archiveBaseName.set('admin')
        archiveVersion.set(version as String)
        archiveClassifier.set('')
    }
    dependencies {
        implementation project(':apps:core')
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
    }
    springBoot {
        mainClass = 'com.farm2pot.AdminApplication'
    }
}

// subscription 모듈
project(":apps:subscription") {
    apply plugin: 'org.springframework.boot'
    bootJar {
        archiveBaseName.set('subscription')
        archiveVersion.set(version as String)
        archiveClassifier.set('')
    }
    dependencies {
        implementation project(':apps:core')
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
    }
    springBoot {
        mainClass = 'com.farm2pot.SubscriptionApplication'
    }
}

// gateway 모듈
project(":apps:gateway") {
    apply plugin: 'org.springframework.boot'
    bootJar {
        archiveBaseName.set('gateway')
        archiveVersion.set(version as String)
        archiveClassifier.set('')
    }

    // Gateway 전용 의존성
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-security'
    }

    // Gateway는 라우팅만 하므로 JPA 관련 의존성 제외
    configurations {
        implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-jpa'
        implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-data-redis'
        implementation.exclude group: 'mysql', module: 'mysql-connector-java'
        implementation.exclude group: 'org.mariadb.jdbc', module: 'mariadb-java-client'
        implementation.exclude group: 'com.querydsl'
        implementation.exclude group: 'com.github.gavlyukovskiy', module: 'p6spy-spring-boot-starter'
    }

    springBoot {
        mainClass = 'com.farm2pot.GatewayApplication'
    }
}